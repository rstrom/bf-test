{"version":3,"sources":["../src/handlers/worker.ts"],"sourcesContent":["/**\n * Cloudflare Worker handler for standalone butterfly deployment\n * This allows deploying a butterfly-powered static site as a CF Worker\n * with zero external dependencies (no KV, no R2, just bundled assets)\n */\n\nimport { ButterflyHandler, ButterflyHandlerResult } from \"./butterfly-handler\";\nimport {\n  AssetLoader,\n  AssetNotFoundError,\n  AssetLoadError,\n  AssetStreamResult,\n  AssetRangeResult,\n} from \"../services/asset-loader\";\nimport { Effect, Layer, Option } from \"effect\";\n\n/**\n * Static assets bundled directly into the worker\n * Key: asset path (e.g., \"sitemap.xml\", \"data/profile-alice.json\")\n * Value: asset content as string\n */\nexport interface StaticAssets {\n  [path: string]: string;\n}\n\n/**\n * No environment dependencies needed for pure static deployment\n */\nexport interface WorkerEnv {\n  // Reserved for future use, but no dependencies required\n}\n\nexport class WorkerHandler {\n  private assets: StaticAssets;\n\n  constructor(staticAssets: StaticAssets = {}) {\n    this.assets = staticAssets;\n  }\n\n  /**\n   * Handle incoming requests using butterfly routing\n   */\n  async handleRequest(request: Request, env?: WorkerEnv): Promise<Response> {\n    const url = new URL(request.url);\n    const pathname = url.pathname;\n\n    // Create simple AssetLoader layer for static assets\n    const assets = this.assets; // Capture assets in closure\n    const staticAssetLoader = Layer.succeed(AssetLoader, {\n      loadAsset: Effect.fn(\"StaticAssetLoader/loadAsset\")((path: string) =>\n        Effect.gen(function* () {\n          const cleanPath = path.startsWith(\"/\") ? path.slice(1) : path;\n          const maybeContent = Option.fromNullable(assets[cleanPath]);\n\n          return yield* Option.match(maybeContent, {\n            onNone: () => Effect.fail(new AssetNotFoundError({ path })),\n            onSome: (content) => Effect.succeed(content),\n          });\n        }),\n      ),\n      // Simple implementations that don't support streaming\n      loadAssetStream: Effect.fn(\"StaticAssetLoader/loadAssetStream\")((path: string) =>\n        Effect.fail(new AssetNotFoundError({ path: `Streaming not supported in worker: ${path}` })),\n      ),\n      loadAssetRange: Effect.fn(\"StaticAssetLoader/loadAssetRange\")((path: string, range) =>\n        Effect.fail(new AssetNotFoundError({ path: `Range requests not supported in worker: ${path}` })),\n      ),\n    });\n\n    const self = this;\n    return await Effect.runPromise(\n      ButterflyHandler.process(pathname).pipe(\n        Effect.provide(staticAssetLoader),\n        Effect.map((result) => {\n          if (!result.matched || !result.assetPath) {\n            // Try to serve direct static assets for unmatched routes\n            return self.serveStaticAsset(pathname);\n          }\n\n          // Load the matched asset via butterfly routing\n          const assetPath = result.assetPath.replace(/^\\//, \"\");\n          const maybeContent = Option.fromNullable(self.assets[assetPath]);\n\n          return Option.match(maybeContent, {\n            onNone: () => {\n              // If butterfly routing matched but asset not found, try direct static\n              return self.serveStaticAsset(pathname);\n            },\n            onSome: (content) => {\n              const mimeType = self.getMimeType(assetPath);\n              return new Response(content, {\n                headers: {\n                  \"Content-Type\": mimeType,\n                  \"Cache-Control\": \"public, max-age=3600\",\n                },\n              });\n            },\n          });\n        }),\n        Effect.catchAll((error) =>\n          Effect.sync(() => {\n            console.error(\"Butterfly handler error:\", error);\n            return new Response(\"Internal Server Error\", { status: 500 });\n          }),\n        ),\n      ) as Effect.Effect<Response, never, never>,\n    );\n  }\n\n  /**\n   * Attempt to serve a static asset directly (for unmatched routes)\n   */\n  private serveStaticAsset(pathname: string): Response {\n    const cleanPath = pathname.startsWith(\"/\") ? pathname.slice(1) : pathname;\n    const indexPath = cleanPath || \"index.html\";\n\n    const maybeContent = Option.fromNullable(this.assets[indexPath]);\n\n    return Option.match(maybeContent, {\n      onNone: () => new Response(\"Not Found\", { status: 404 }),\n      onSome: (content) => {\n        const mimeType = this.getMimeType(indexPath);\n        return new Response(content, {\n          headers: {\n            \"Content-Type\": mimeType,\n            \"Cache-Control\": \"public, max-age=3600\",\n          },\n        });\n      },\n    });\n  }\n\n  /**\n   * Determine MIME type based on file extension\n   */\n  private getMimeType(filePath: string): string {\n    if (filePath.endsWith(\".css\")) return \"text/css\";\n    if (filePath.endsWith(\".js\")) return \"application/javascript\";\n    if (filePath.endsWith(\".json\")) return \"application/json\";\n    if (filePath.endsWith(\".xml\")) return \"application/xml\";\n    if (filePath.endsWith(\".png\")) return \"image/png\";\n    if (filePath.endsWith(\".jpg\") || filePath.endsWith(\".jpeg\")) return \"image/jpeg\";\n    if (filePath.endsWith(\".svg\")) return \"image/svg+xml\";\n    if (filePath.endsWith(\".woff2\")) return \"font/woff2\";\n    if (filePath.endsWith(\".woff\")) return \"font/woff\";\n    if (filePath.endsWith(\".ttf\")) return \"font/ttf\";\n    return \"text/html\";\n  }\n\n  /**\n   * Create a fetch handler for Cloudflare Workers\n   */\n  static createFetchHandler(staticAssets: StaticAssets = {}) {\n    const handler = new WorkerHandler(staticAssets);\n\n    return {\n      async fetch(request: Request, env: WorkerEnv = {}): Promise<Response> {\n        return handler.handleRequest(request, env);\n      },\n    };\n  }\n}\n\n// Default export for easy CF Worker integration\nexport default WorkerHandler;\n"],"mappings":";;;;;;;;;AAcA,SAAS,QAAQ,OAAO,cAAc;AAkB/B,IAAM,gBAAN,MAAM,eAAc;AAAA,EACjB;AAAA,EAER,YAAY,eAA6B,CAAC,GAAG;AAC3C,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,SAAkB,KAAoC;AACxE,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,WAAW,IAAI;AAGrB,UAAM,SAAS,KAAK;AACpB,UAAM,oBAAoB,MAAM,QAAQ,aAAa;AAAA,MACnD,WAAW,OAAO,GAAG,6BAA6B;AAAA,QAAE,CAAC,SACnD,OAAO,IAAI,aAAa;AACtB,gBAAM,YAAY,KAAK,WAAW,GAAG,IAAI,KAAK,MAAM,CAAC,IAAI;AACzD,gBAAM,eAAe,OAAO,aAAa,OAAO,SAAS,CAAC;AAE1D,iBAAO,OAAO,OAAO,MAAM,cAAc;AAAA,YACvC,QAAQ,MAAM,OAAO,KAAK,IAAI,mBAAmB,EAAE,KAAK,CAAC,CAAC;AAAA,YAC1D,QAAQ,CAAC,YAAY,OAAO,QAAQ,OAAO;AAAA,UAC7C,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA;AAAA,MAEA,iBAAiB,OAAO,GAAG,mCAAmC;AAAA,QAAE,CAAC,SAC/D,OAAO,KAAK,IAAI,mBAAmB,EAAE,MAAM,sCAAsC,IAAI,GAAG,CAAC,CAAC;AAAA,MAC5F;AAAA,MACA,gBAAgB,OAAO,GAAG,kCAAkC;AAAA,QAAE,CAAC,MAAc,UAC3E,OAAO,KAAK,IAAI,mBAAmB,EAAE,MAAM,2CAA2C,IAAI,GAAG,CAAC,CAAC;AAAA,MACjG;AAAA,IACF,CAAC;AAED,UAAM,OAAO;AACb,WAAO,MAAM,OAAO;AAAA,MAClB,iBAAiB,QAAQ,QAAQ,EAAE;AAAA,QACjC,OAAO,QAAQ,iBAAiB;AAAA,QAChC,OAAO,IAAI,CAAC,WAAW;AACrB,cAAI,CAAC,OAAO,WAAW,CAAC,OAAO,WAAW;AAExC,mBAAO,KAAK,iBAAiB,QAAQ;AAAA,UACvC;AAGA,gBAAM,YAAY,OAAO,UAAU,QAAQ,OAAO,EAAE;AACpD,gBAAM,eAAe,OAAO,aAAa,KAAK,OAAO,SAAS,CAAC;AAE/D,iBAAO,OAAO,MAAM,cAAc;AAAA,YAChC,QAAQ,MAAM;AAEZ,qBAAO,KAAK,iBAAiB,QAAQ;AAAA,YACvC;AAAA,YACA,QAAQ,CAAC,YAAY;AACnB,oBAAM,WAAW,KAAK,YAAY,SAAS;AAC3C,qBAAO,IAAI,SAAS,SAAS;AAAA,gBAC3B,SAAS;AAAA,kBACP,gBAAgB;AAAA,kBAChB,iBAAiB;AAAA,gBACnB;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,QACD,OAAO;AAAA,UAAS,CAAC,UACf,OAAO,KAAK,MAAM;AAChB,oBAAQ,MAAM,4BAA4B,KAAK;AAC/C,mBAAO,IAAI,SAAS,yBAAyB,EAAE,QAAQ,IAAI,CAAC;AAAA,UAC9D,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,UAA4B;AACnD,UAAM,YAAY,SAAS,WAAW,GAAG,IAAI,SAAS,MAAM,CAAC,IAAI;AACjE,UAAM,YAAY,aAAa;AAE/B,UAAM,eAAe,OAAO,aAAa,KAAK,OAAO,SAAS,CAAC;AAE/D,WAAO,OAAO,MAAM,cAAc;AAAA,MAChC,QAAQ,MAAM,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,MACvD,QAAQ,CAAC,YAAY;AACnB,cAAM,WAAW,KAAK,YAAY,SAAS;AAC3C,eAAO,IAAI,SAAS,SAAS;AAAA,UAC3B,SAAS;AAAA,YACP,gBAAgB;AAAA,YAChB,iBAAiB;AAAA,UACnB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAY,UAA0B;AAC5C,QAAI,SAAS,SAAS,MAAM,EAAG,QAAO;AACtC,QAAI,SAAS,SAAS,KAAK,EAAG,QAAO;AACrC,QAAI,SAAS,SAAS,OAAO,EAAG,QAAO;AACvC,QAAI,SAAS,SAAS,MAAM,EAAG,QAAO;AACtC,QAAI,SAAS,SAAS,MAAM,EAAG,QAAO;AACtC,QAAI,SAAS,SAAS,MAAM,KAAK,SAAS,SAAS,OAAO,EAAG,QAAO;AACpE,QAAI,SAAS,SAAS,MAAM,EAAG,QAAO;AACtC,QAAI,SAAS,SAAS,QAAQ,EAAG,QAAO;AACxC,QAAI,SAAS,SAAS,OAAO,EAAG,QAAO;AACvC,QAAI,SAAS,SAAS,MAAM,EAAG,QAAO;AACtC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,mBAAmB,eAA6B,CAAC,GAAG;AACzD,UAAM,UAAU,IAAI,eAAc,YAAY;AAE9C,WAAO;AAAA,MACL,MAAM,MAAM,SAAkB,MAAiB,CAAC,GAAsB;AACpE,eAAO,QAAQ,cAAc,SAAS,GAAG;AAAA,MAC3C;AAAA,IACF;AAAA,EACF;AACF;","names":[]}