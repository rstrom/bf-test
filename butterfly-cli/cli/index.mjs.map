{"version":3,"sources":["../../src/cli/index.ts","../../src/cli/commands/build.ts","../../src/cli/ssg-generator.ts","../../src/cli/commands/validate.ts","../../src/cli/ssg-validator.ts","../../src/cli/commands/serve.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Args, Command, Options } from \"@effect/cli\";\nimport { NodeContext, NodeRuntime } from \"@effect/platform-node\";\nimport { Effect } from \"effect\";\nimport { buildCommand } from \"./commands/build\";\nimport { validateCommand } from \"./commands/validate\";\nimport { serveCommand } from \"./commands/serve\";\n\n// Common options\nconst sourceDir = Options.directory(\"source\").pipe(\n  Options.withAlias(\"s\"),\n  Options.withDefault(\".\")\n);\n\nconst verbose = Options.boolean(\"verbose\");\n\n// Build command\nconst buildArgs = {\n  source: sourceDir,\n  output: Options.directory(\"output\").pipe(Options.withAlias(\"o\"), Options.withDefault(\"dist\")),\n  verbose,\n};\n\nconst build = Command.make(\"build\", buildArgs, buildCommand);\n\n// Validate command  \nconst validateArgs = {\n  source: sourceDir,\n};\n\nconst validate = Command.make(\"validate\", validateArgs, validateCommand);\n\n// Serve command\nconst serveArgs = {\n  source: sourceDir,\n  port: Options.integer(\"port\").pipe(Options.withAlias(\"p\"), Options.withDefault(3000)),\n};\n\nconst serve = Command.make(\"serve\", serveArgs, serveCommand);\n\n// Main butterfly command\nconst butterfly = Command.make(\"butterfly\", {}, () => \n  Effect.succeed(console.log(\"ü¶ã Butterfly CLI - Static site generator for Moneta applications\"))\n).pipe(\n  Command.withSubcommands([build, validate, serve])\n);\n\n// Run the CLI\nconst cli = Command.run(butterfly, {\n  name: \"Butterfly CLI\",\n  version: \"v0.1.0\",\n});\n\ncli(process.argv).pipe(Effect.provide(NodeContext.layer), NodeRuntime.runMain);","import { Effect, Console } from \"effect\";\nimport { SSGGenerator } from \"../ssg-generator\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nexport interface BuildConfig {\n  source: string;\n  output: string;\n  verbose: boolean;\n}\n\nexport const buildCommand = Effect.fn(\"buildCommand\")((config: BuildConfig) =>\n  Effect.gen(function* () {\n    yield* Console.log(\"ü¶ã Butterfly SSG Build\");\n    yield* Console.log(`Source: ${path.resolve(config.source)}`);\n    yield* Console.log(`Output: ${path.resolve(config.output)}`);\n\n    // Check if source directory exists\n    const sourceExists = yield* Effect.tryPromise({\n      try: () => fs.promises.access(config.source).then(() => true),\n      catch: () => false,\n    });\n\n    if (!sourceExists) {\n      yield* Console.error(`‚ùå Source directory not found: ${config.source}`);\n      yield* Effect.fail(new Error(\"Source directory not found\"));\n    }\n\n    // Check for sitemap.xml\n    const sitemapPath = path.join(config.source, \".moneta\", \"sitemap.xml\");\n    const sitemapExists = yield* Effect.tryPromise({\n      try: () => fs.promises.access(sitemapPath).then(() => true),\n      catch: () => false,\n    });\n\n    if (!sitemapExists) {\n      yield* Console.log(`‚ö†Ô∏è  No sitemap.xml found at ${sitemapPath}`);\n      yield* Console.log(\"   Using default routing rules\");\n    }\n\n    const result = yield* SSGGenerator.build({\n      sourceDir: config.source,\n      outputDir: config.output,\n      verbose: config.verbose,\n    });\n\n    if (result.success) {\n      yield* Console.log(\"‚úÖ Build completed successfully\");\n      yield* Console.log(`   Generated ${result.generatedFiles} files`);\n      if (result.routes && result.routes.length > 0) {\n        yield* Console.log(`   Routes generated:`);\n        for (const route of result.routes) {\n          yield* Console.log(`     ${route.pattern} ‚Üí ${route.outputPath}`);\n        }\n      }\n    } else {\n      yield* Console.error(\"‚ùå Build failed\");\n      if (result.errors) {\n        for (const error of result.errors) {\n          yield* Console.error(`   ${error}`);\n        }\n      }\n      yield* Effect.fail(new Error(\"Build failed\"));\n    }\n  })\n);","import { Effect, Option, Array as EffectArray } from \"effect\";\nimport { SitemapParser } from \"../parsers/sitemap-parser\";\nimport { SitemapRouter } from \"../services/sitemap-router\";\nimport { PatternMatcher } from \"../parsers/pattern-matcher\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport interface SSGGeneratorOptions {\n  sourceDir: string;\n  outputDir: string;\n  verbose: boolean;\n}\n\nexport interface SSGGeneratorResult {\n  success: boolean;\n  generatedFiles: number;\n  routes?: GeneratedRoute[];\n  errors?: string[];\n}\n\nexport interface GeneratedRoute {\n  pattern: string;\n  outputPath: string;\n  sourceAsset: string;\n}\n\nexport class SSGGenerator {\n  static build = Effect.fn(\"SSGGenerator/build\")((options: SSGGeneratorOptions) =>\n    Effect.gen(function* () {\n      const { sourceDir, outputDir, verbose } = options;\n\n      if (verbose) {\n        console.log(\"üîç Analyzing sitemap.xml...\");\n      }\n\n      // Ensure output directory exists\n      yield* Effect.tryPromise({\n        try: () => fs.promises.mkdir(outputDir, { recursive: true }),\n        catch: (error) => new Error(`Failed to create output directory: ${error}`),\n      });\n\n      // Try to load sitemap.xml\n      const sitemapPath = path.join(sourceDir, \".moneta\", \"sitemap.xml\");\n      const maybeSitemapContent = yield* Effect.tryPromise({\n        try: () => fs.promises.readFile(sitemapPath, \"utf-8\"),\n        catch: () => null,\n      }).pipe(\n        Effect.map(Option.fromNullable)\n      );\n\n      // Parse sitemap or use default\n      const sitemap = yield* Option.match(maybeSitemapContent, {\n        onNone: () => Effect.succeed(SitemapParser.generateDefaultSitemap()),\n        onSome: (content) => SitemapParser.parse(content).pipe(\n          Effect.catchAll((error) => {\n            console.warn(`‚ö†Ô∏è  Failed to parse sitemap.xml: ${error.message}`);\n            console.warn(\"   Using default routing rules\");\n            return Effect.succeed(SitemapParser.generateDefaultSitemap());\n          })\n        ),\n      });\n\n      if (verbose) {\n        console.log(`üìã Found ${sitemap.pipelines.length} pipeline(s) in sitemap`);\n      }\n\n      // Discover all assets in source directory\n      const allAssets = yield* discoverAssets(sourceDir);\n      \n      if (verbose) {\n        console.log(`üìÅ Found ${allAssets.length} assets to process`);\n      }\n\n      // Generate routes by testing each asset against sitemap patterns\n      const generatedRoutes: GeneratedRoute[] = [];\n      const processedAssets = new Set<string>();\n\n      // For each asset, find all possible routes that could lead to it\n      for (const asset of allAssets) {\n        const routes = yield* generateRoutesForAsset(asset, sitemap, sourceDir, outputDir, verbose);\n        generatedRoutes.push(...routes);\n        \n        for (const route of routes) {\n          processedAssets.add(route.sourceAsset);\n        }\n      }\n\n      // Copy remaining assets that weren't matched by any route patterns\n      let copiedDirectly = 0;\n      for (const asset of allAssets) {\n        if (!processedAssets.has(asset)) {\n          yield* copyAssetDirectly(asset, sourceDir, outputDir);\n          copiedDirectly++;\n        }\n      }\n\n      if (verbose && copiedDirectly > 0) {\n        console.log(`üìã Copied ${copiedDirectly} assets directly (no route patterns matched)`);\n      }\n\n      return {\n        success: true,\n        generatedFiles: generatedRoutes.length + copiedDirectly,\n        routes: generatedRoutes,\n      } as SSGGeneratorResult;\n    })\n  );\n}\n\n// Discover all assets in source directory\nfunction discoverAssets(sourceDir: string): Effect.Effect<string[], Error> {\n  return Effect.tryPromise({\n    try: async () => {\n      const assets: string[] = [];\n      \n      async function walkDir(dir: string, basePath = \"\") {\n        const entries = await fs.promises.readdir(dir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          if (entry.name.startsWith(\".\")) continue; // Skip hidden files\n          \n          const fullPath = path.join(dir, entry.name);\n          const relativePath = basePath ? path.join(basePath, entry.name) : entry.name;\n          \n          if (entry.isDirectory()) {\n            await walkDir(fullPath, relativePath);\n          } else {\n            assets.push(relativePath);\n          }\n        }\n      }\n      \n      await walkDir(sourceDir);\n      return assets;\n    },\n    catch: (error) => new Error(`Failed to discover assets: ${error}`),\n  });\n}\n\n// Generate possible routes for a given asset based on sitemap patterns\nfunction generateRoutesForAsset(\n  assetPath: string,\n  sitemap: any,\n  sourceDir: string,\n  outputDir: string,\n  verbose: boolean\n): Effect.Effect<GeneratedRoute[]> {\n  return Effect.gen(function* () {\n    const routes: GeneratedRoute[] = [];\n    \n    // Test various potential URLs that could match this asset\n    const potentialUrls = generatePotentialUrls(assetPath);\n    \n    for (const testUrl of potentialUrls) {\n      const routeMatch = yield* SitemapRouter.matchRequest(testUrl, sitemap);\n      \n      if (routeMatch.matched && routeMatch.assetPath === assetPath) {\n        // This URL pattern leads to our asset - generate the static file\n        const outputPath = generateOutputPath(testUrl);\n        \n        yield* copyAssetToOutput(assetPath, outputPath, sourceDir, outputDir);\n        \n        routes.push({\n          pattern: testUrl,\n          outputPath,\n          sourceAsset: assetPath,\n        });\n        \n        if (verbose) {\n          console.log(`  /${testUrl} ‚Üí ${outputPath}`);\n        }\n      }\n    }\n    \n    return routes;\n  });\n}\n\n// Generate potential URLs that could match an asset - GitHub Pages focused\nfunction generatePotentialUrls(assetPath: string): string[] {\n  const urls: string[] = [];\n  \n  // Remove file extension and try various patterns\n  const withoutExt = assetPath.replace(/\\.[^.]+$/, \"\");\n  \n  // Add the asset path itself (for direct file access)\n  urls.push(assetPath);\n  \n  // Handle index.html files - these should map to directory URLs\n  if (assetPath.endsWith(\"index.html\")) {\n    const dirPath = path.dirname(assetPath);\n    if (dirPath !== \".\") {\n      urls.push(dirPath);\n      urls.push(dirPath + \"/\");\n    } else {\n      urls.push(\"\");\n      urls.push(\"/\");\n    }\n  } else {\n    // For non-index files, add clean URL patterns\n    urls.push(withoutExt);\n    urls.push(withoutExt + \"/\");\n  }\n  \n  // Add common GitHub Pages patterns\n  if (assetPath.includes(\"/\")) {\n    const pathParts = withoutExt.split(\"/\");\n    // Generate nested directory patterns\n    urls.push(\"/\" + withoutExt);\n    urls.push(\"/\" + withoutExt + \"/\");\n  }\n  \n  return [...new Set(urls)]; // Remove duplicates\n}\n\n// Generate output path for a URL - GitHub Pages compatible\nfunction generateOutputPath(url: string): string {\n  if (!url || url === \"/\" || url === \"\") {\n    return \"index.html\";\n  }\n  \n  // Clean the URL\n  const cleanUrl = url.startsWith(\"/\") ? url.slice(1) : url;\n  \n  // If URL ends with /, it should be a directory with index.html\n  if (cleanUrl.endsWith(\"/\")) {\n    return path.join(cleanUrl, \"index.html\");\n  }\n  \n  // If URL has an extension, keep it as-is\n  if (path.extname(cleanUrl)) {\n    return cleanUrl;\n  }\n  \n  // For clean URLs (no extension), create both the .html file AND a directory with index.html\n  // This enables GitHub Pages to serve /about as /about/ automatically\n  return path.join(cleanUrl, \"index.html\");\n}\n\n// Copy asset to output with proper structure\nfunction copyAssetToOutput(\n  assetPath: string,\n  outputPath: string,\n  sourceDir: string,\n  outputDir: string\n): Effect.Effect<void, never> {\n  return Effect.tryPromise({\n    try: async () => {\n      const sourcePath = path.join(sourceDir, assetPath);\n      const destPath = path.join(outputDir, outputPath);\n      const destDir = path.dirname(destPath);\n      \n      // Ensure destination directory exists\n      await fs.promises.mkdir(destDir, { recursive: true });\n      \n      // Copy the file\n      await fs.promises.copyFile(sourcePath, destPath);\n    },\n    catch: (error) => new Error(`Failed to copy ${assetPath} to ${outputPath}: ${error}`),\n  }).pipe(Effect.orDie);\n}\n\n// Copy asset directly without route processing\nfunction copyAssetDirectly(\n  assetPath: string,\n  sourceDir: string,\n  outputDir: string\n): Effect.Effect<void, never> {\n  return copyAssetToOutput(assetPath, assetPath, sourceDir, outputDir).pipe(Effect.orDie);\n}","import { Effect, Console } from \"effect\";\nimport { SSGValidator } from \"../ssg-validator\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nexport interface ValidateConfig {\n  source: string;\n}\n\nexport const validateCommand = Effect.fn(\"validateCommand\")((config: ValidateConfig) =>\n  Effect.gen(function* () {\n    yield* Console.log(\"ü¶ã Butterfly SSG Validation\");\n    yield* Console.log(`Source: ${path.resolve(config.source)}`);\n\n    // Check if source directory exists\n    const sourceExists = yield* Effect.tryPromise({\n      try: () => fs.promises.access(config.source).then(() => true),\n      catch: () => false,\n    });\n\n    if (!sourceExists) {\n      yield* Console.error(`‚ùå Source directory not found: ${config.source}`);\n      yield* Effect.fail(new Error(\"Source directory not found\"));\n    }\n\n    const result = yield* SSGValidator.validate({\n      sourceDir: config.source,\n    });\n\n    if (result.isSSGCompatible) {\n      yield* Console.log(\"‚úÖ Application is compatible with Static Site Generation\");\n      if (result.warnings && result.warnings.length > 0) {\n        yield* Console.log(\"‚ö†Ô∏è  Warnings:\");\n        for (const warning of result.warnings) {\n          yield* Console.log(`   ${warning}`);\n        }\n      }\n    } else {\n      yield* Console.error(\"‚ùå Application is NOT compatible with Static Site Generation\");\n      yield* Console.error(\"Issues found:\");\n      for (const error of result.errors) {\n        yield* Console.error(`   ${error}`);\n      }\n      \n      yield* Console.log(\"\\nTo make your application SSG-compatible:\");\n      yield* Console.log(\"‚Ä¢ Remove server-side database queries\");\n      yield* Console.log(\"‚Ä¢ Remove Yjs collaborative features\");\n      yield* Console.log(\"‚Ä¢ Remove real-time endpoints\");\n      yield* Console.log(\"‚Ä¢ Use only static assets and client-side logic\");\n      \n      yield* Effect.fail(new Error(\"Application is not SSG compatible\"));\n    }\n  })\n);","import { Effect } from \"effect\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport interface SSGValidatorOptions {\n  sourceDir: string;\n}\n\nexport interface SSGValidatorResult {\n  isSSGCompatible: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport class SSGValidator {\n  static validate = Effect.fn(\"SSGValidator/validate\")((options: SSGValidatorOptions) =>\n    Effect.gen(function* () {\n      const { sourceDir } = options;\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Check for sitemap.xml and validate its patterns\n      const sitemapPath = path.join(sourceDir, \".moneta\", \"sitemap.xml\");\n      const hasSitemap = yield* Effect.tryPromise({\n        try: () => fs.promises.access(sitemapPath).then(() => true),\n        catch: () => false,\n      });\n\n      if (hasSitemap) {\n        const sitemapContent = yield* Effect.tryPromise({\n          try: () => fs.promises.readFile(sitemapPath, \"utf-8\"),\n          catch: (error) => {\n            errors.push(`Failed to read sitemap.xml: ${error}`);\n            return \"\";\n          },\n        });\n\n        if (sitemapContent) {\n          // Check for dynamic features in sitemap\n          const dynamicPatterns = checkForDynamicPatterns(sitemapContent);\n          errors.push(...dynamicPatterns);\n        }\n      } else {\n        warnings.push(\"No sitemap.xml found - will use default routing rules\");\n      }\n\n      // Scan all files for dynamic features\n      const allFiles = yield* discoverAllFiles(sourceDir);\n      \n      for (const file of allFiles) {\n        const issues = yield* validateFile(file, sourceDir);\n        errors.push(...issues.errors);\n        warnings.push(...issues.warnings);\n      }\n\n      // Check for package.json dependencies that indicate dynamic features\n      const packageJsonPath = path.join(sourceDir, \"package.json\");\n      const hasPackageJson = yield* Effect.tryPromise({\n        try: () => fs.promises.access(packageJsonPath).then(() => true),\n        catch: () => false,\n      });\n\n      if (hasPackageJson) {\n        const packageContent = yield* Effect.tryPromise({\n          try: () => fs.promises.readFile(packageJsonPath, \"utf-8\"),\n          catch: () => \"{}\",\n        });\n\n        try {\n          const pkg = JSON.parse(packageContent);\n          const dynamicDeps = checkForDynamicDependencies(pkg);\n          warnings.push(...dynamicDeps);\n        } catch {\n          warnings.push(\"Invalid package.json found\");\n        }\n      }\n\n      return {\n        isSSGCompatible: errors.length === 0,\n        errors,\n        warnings,\n      } as SSGValidatorResult;\n    })\n  );\n}\n\nfunction checkForDynamicPatterns(sitemapContent: string): string[] {\n  const errors: string[] = [];\n  \n  // Check for server-side processing patterns\n  if (sitemapContent.includes('transform') && \n      (sitemapContent.includes('xslt') || sitemapContent.includes('server'))) {\n    errors.push(\"Sitemap contains server-side transformations that cannot be pre-generated\");\n  }\n  \n  // Check for dynamic data sources\n  if (sitemapContent.includes('database') || sitemapContent.includes('sql')) {\n    errors.push(\"Sitemap references database sources - not compatible with SSG\");\n  }\n  \n  return errors;\n}\n\nfunction discoverAllFiles(sourceDir: string): Effect.Effect<string[], never> {\n  return Effect.tryPromise({\n    try: async () => {\n      const files: string[] = [];\n      \n      async function walkDir(dir: string, basePath = \"\") {\n        const entries = await fs.promises.readdir(dir, { withFileTypes: true });\n        \n        for (const entry of entries) {\n          if (entry.name.startsWith(\".\")) continue;\n          \n          const fullPath = path.join(dir, entry.name);\n          const relativePath = basePath ? path.join(basePath, entry.name) : entry.name;\n          \n          if (entry.isDirectory()) {\n            await walkDir(fullPath, relativePath);\n          } else {\n            files.push(relativePath);\n          }\n        }\n      }\n      \n      await walkDir(sourceDir);\n      return files;\n    },\n    catch: (error) => new Error(`Failed to discover files: ${error}`),\n  }).pipe(Effect.orDie);\n}\n\nfunction validateFile(\n  filePath: string,\n  sourceDir: string\n): Effect.Effect<{ errors: string[]; warnings: string[] }, never> {\n  return Effect.gen(function* () {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    \n    const fullPath = path.join(sourceDir, filePath);\n    const fileExt = path.extname(filePath).toLowerCase();\n    \n    // Only check text files that might contain dynamic code\n    if (!['.js', '.ts', '.jsx', '.tsx', '.html', '.json', '.xml'].includes(fileExt)) {\n      return { errors, warnings };\n    }\n    \n    const content = yield* Effect.tryPromise({\n      try: () => fs.promises.readFile(fullPath, \"utf-8\"),\n      catch: () => \"\",\n    }).pipe(Effect.orDie);\n    \n    if (!content) {\n      return { errors, warnings };\n    }\n    \n    // Check for server-side database calls\n    if (content.includes('SELECT ') || \n        content.includes('INSERT ') || \n        content.includes('UPDATE ') || \n        content.includes('DELETE ')) {\n      errors.push(`${filePath}: Contains SQL queries - not compatible with SSG`);\n    }\n    \n    // Check for Yjs collaborative features\n    if (content.includes('yjs') || content.includes('Y.Doc') || content.includes('awareness')) {\n      errors.push(`${filePath}: Contains Yjs collaborative features - not compatible with SSG`);\n    }\n    \n    // Check for server-side APIs\n    if (content.includes('fetch(') && content.includes('/api/')) {\n      warnings.push(`${filePath}: Contains API calls - ensure these work with static hosting`);\n    }\n    \n    // Check for WebSocket usage\n    if (content.includes('WebSocket') || content.includes('ws://') || content.includes('wss://')) {\n      errors.push(`${filePath}: Contains WebSocket usage - not compatible with SSG`);\n    }\n    \n    // Check for server-side rendering patterns\n    if (content.includes('getServerSideProps') || \n        content.includes('getInitialProps') ||\n        content.includes('loader:') && content.includes('Effect')) {\n      errors.push(`${filePath}: Contains server-side rendering - not compatible with SSG`);\n    }\n    \n    return { errors, warnings };\n  });\n}\n\nfunction checkForDynamicDependencies(pkg: any): string[] {\n  const warnings: string[] = [];\n  const dependencies = { ...pkg.dependencies, ...pkg.devDependencies };\n  \n  // Known problematic dependencies\n  const dynamicDeps = [\n    'yjs',\n    'y-websocket',\n    'express',\n    'fastify',\n    'prisma',\n    'drizzle-orm',\n    'kysely',\n  ];\n  \n  for (const dep of dynamicDeps) {\n    if (dependencies[dep]) {\n      warnings.push(`Dependency '${dep}' may indicate dynamic features`);\n    }\n  }\n  \n  return warnings;\n}","import { Effect, Layer, Console } from \"effect\";\nimport { ButterflyHandler } from \"../../handlers/butterfly-handler\";\nimport { AssetLoader, AssetNotFoundError } from \"../../services/asset-loader\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nexport interface ServeConfig {\n  port: number;\n  source: string;\n}\n\nexport const serveCommand = Effect.fn(\"serveCommand\")((config: ServeConfig) =>\n  Effect.gen(function* () {\n    yield* Console.log(\"ü¶ã Butterfly Development Server\");\n    yield* Console.log(`Source: ${path.resolve(config.source)}`);\n    yield* Console.log(`Port: ${config.port}`);\n\n    // Create file system asset loader\n    const fsAssetLoader = Layer.succeed(AssetLoader, {\n      loadAsset: Effect.fn(\"FileSystemLoader/loadAsset\")((assetPath: string) =>\n        Effect.gen(function* () {\n          const fullPath = path.join(config.source, assetPath);\n          \n          return yield* Effect.tryPromise({\n            try: () => fs.promises.readFile(fullPath, \"utf-8\"),\n            catch: (error) => new AssetNotFoundError({ path: assetPath }),\n          });\n        })\n      ),\n      loadAssetStream: Effect.fn(\"FileSystemLoader/loadAssetStream\")((assetPath: string) =>\n        Effect.fail(new AssetNotFoundError({ path: assetPath }))\n      ),\n      loadAssetRange: Effect.fn(\"FileSystemLoader/loadAssetRange\")((assetPath: string, range) =>\n        Effect.fail(new AssetNotFoundError({ path: assetPath }))\n      ),\n    });\n\n    yield* Effect.tryPromise({\n      try: () => new Promise<void>((resolve, reject) => {\n        const server = http.createServer(async (req, res) => {\n          const url = new URL(req.url || \"/\", `http://localhost:${config.port}`);\n          const pathname = url.pathname;\n\n          try {\n            const result = await Effect.runPromise(\n              ButterflyHandler.process(pathname).pipe(\n                Effect.provide(fsAssetLoader),\n                Effect.orDie // Convert errors to defects for simplicity in dev server\n              ) as Effect.Effect<any, never, never>\n            ) as any; // TODO: Fix AssetLoader environment type issue\n\n            if (result.matched && result.assetPath) {\n              const fullPath = path.join(config.source, result.assetPath);\n              \n              if (fs.existsSync(fullPath)) {\n                const content = await fs.promises.readFile(fullPath, \"utf-8\");\n                const mimeType = getMimeType(result.assetPath);\n                \n                res.writeHead(200, {\n                  \"Content-Type\": mimeType,\n                  \"Cache-Control\": \"no-cache\",\n                });\n                res.end(content);\n              } else {\n                res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n                res.end(\"Asset not found\");\n              }\n            } else {\n              // Try to serve index.html for unmatched routes\n              const indexPath = path.join(config.source, \"index.html\");\n              if (fs.existsSync(indexPath)) {\n                const content = await fs.promises.readFile(indexPath, \"utf-8\");\n                res.writeHead(200, {\n                  \"Content-Type\": \"text/html\",\n                  \"Cache-Control\": \"no-cache\",\n                });\n                res.end(content);\n              } else {\n                res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n                res.end(\"Not found\");\n              }\n            }\n          } catch (error) {\n            console.error(\"Request error:\", error);\n            res.writeHead(500, { \"Content-Type\": \"text/plain\" });\n            res.end(\"Internal server error\");\n          }\n        });\n\n        server.listen(config.port, () => {\n          console.log(`‚úÖ Server running at http://localhost:${config.port}`);\n          console.log(\"Press Ctrl+C to stop\");\n          resolve();\n        });\n\n        server.on('error', reject);\n\n        // Graceful shutdown\n        process.on(\"SIGINT\", () => {\n          console.log(\"\\nüõë Shutting down server...\");\n          server.close(() => {\n            console.log(\"‚úÖ Server stopped\");\n            process.exit(0);\n          });\n        });\n      }),\n      catch: (error) => new Error(`Failed to start server: ${error}`),\n    });\n  })\n);\n\nfunction getMimeType(filePath: string): string {\n  if (filePath.endsWith(\".html\")) return \"text/html\";\n  if (filePath.endsWith(\".css\")) return \"text/css\";\n  if (filePath.endsWith(\".js\")) return \"application/javascript\";\n  if (filePath.endsWith(\".json\")) return \"application/json\";\n  if (filePath.endsWith(\".xml\")) return \"application/xml\";\n  if (filePath.endsWith(\".png\")) return \"image/png\";\n  if (filePath.endsWith(\".jpg\") || filePath.endsWith(\".jpeg\")) return \"image/jpeg\";\n  if (filePath.endsWith(\".svg\")) return \"image/svg+xml\";\n  return \"text/plain\";\n}"],"mappings":"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","names":["Effect","Effect","sourceDir","verbose","path","fs","Effect","Effect","Console","Effect","fs","path","sourceDir","path","fs","Effect","Console","Effect","Console","path","fs","Effect","Console","resolve","Effect"]}